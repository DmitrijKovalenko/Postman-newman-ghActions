{
	"info": {
		"_postman_id": "68187dc8-03bc-4203-8822-a1ef866c2343",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25020550"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {\r",
									"    \"name\": \"orange\",\r",
									"    \"price\": 8,\r",
									"    \"sku\": 123321123,\r",
									"    \"description\": \"wouh\"\r",
									"};\r",
									"pm.environment.set(\"createdProductName\", requestBody.name);\r",
									"pm.environment.set(\"createdProductPrice\", requestBody.price);\r",
									"pm.environment.set(\"createdProductSku\", requestBody.sku);\r",
									"pm.environment.set(\"createdProductDescription\", requestBody.description);\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(requestBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									" const responseJson = pm.response.json();\r",
									" \r",
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an ID\", function () {   \r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson.id).to.be.a('number');\r",
									"    pm.expect(responseJson.id).to.be.above(0);\r",
									"    console.log(\"The id of created object is :\",responseJson.id) \r",
									"});\r",
									"\r",
									"pm.test(\"Created product name matches request\", function () {\r",
									"    pm.expect(responseJson.name).to.eql(pm.environment.get(\"createdProductName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Created product price matches request\", function () {\r",
									"    pm.expect(responseJson.price).to.eql(pm.environment.get(\"createdProductPrice\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Created product SKU matches request\", function () {\r",
									"    pm.expect(responseJson.sku).to.eql(pm.environment.get(\"createdProductSku\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Created product description matches request\", function () {\r",
									"    pm.expect(responseJson.description).to.eql(pm.environment.get(\"createdProductDescription\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n    \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const productSchema = {\r",
									"  type: \"array\",\r",
									"  items: {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"price\", \"sku\", \"description\"],\r",
									"    properties: {\r",
									"      id: { type: \"number\" },\r",
									"      name: { type: \"string\" },\r",
									"      price: { type: \"number\" },\r",
									"      sku: { type: \"number\" },\r",
									"      description: { type: \"string\" }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"  pm.response.to.have.jsonSchema(productSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"id in URL eql id in json\",function(){   \r",
									"    console.log(\"Id in json is\",responseJson.id);  \r",
									"    const idFromUrl = pm.collectionVariables.get(\"productId\");\r",
									"    pm.expect(responseJson.id).to.eql(parseInt(idFromUrl));\r",
									"});\r",
									"\r",
									"pm.test(\"URL contains products\", function () { \r",
									"    const categoryFromUrl = pm.collectionVariables.get(\"category\")\r",
									"    console.log(\"Category from URL:\", categoryFromUrl);\r",
									"    pm.expect(categoryFromUrl).to.eql(\"products\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Properties have correct data types\", function () {\r",
									"    pm.expect(responseJson.id).to.be.a('number');\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.price).to.be.a('number');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"    pm.expect(responseJson.description).to.be.a('string');\r",
									"});\r",
									"pm.test(\"The price of object is bigger than 0\", function () {\r",
									"    const price = responseJson.price;\r",
									"    if(price>0.01){\r",
									"        console.log(\"The price of \"+responseJson.name+\" is \"+price);\r",
									"    }\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  type: \"object\",\r",
									"    properties: {\r",
									"      id: { type: \"number\" },\r",
									"      name: { type: \"string\" },\r",
									"      price: { type: \"number\" },\r",
									"      sku: { type: \"number\" },\r",
									"      description: { type: \"string\" }\r",
									"    }\r",
									"  \r",
									"};\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 Updated\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Updated product name matches sent request\", function () {\r",
									"    pm.expect(responseJson.name).to.eql(pm.environment.get(\"updatedProductName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Updated product price matches sent request\", function () {\r",
									"    \r",
									"    pm.expect(responseJson.price).to.eql(pm.environment.get(\"updatedProductPrice\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Updated product SKU matches sent request\", function () {\r",
									"    pm.expect(responseJson.sku).to.eql(pm.environment.get(\"updatedProductSku\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Updated product description matches sent request\", function () {\r",
									"    pm.expect(responseJson.description).to.eql(pm.environment.get(\"updatedProductDescription\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {\r",
									"    \"id\": 4, \r",
									"    \"name\": \"banana\",\r",
									"    \"price\": 155,\r",
									"    \"sku\": 123321123,\r",
									"    \"description\": \"changed description\"\r",
									"};\r",
									"pm.environment.set(\"updatedProductName\", requestBody.name);\r",
									"pm.environment.set(\"updatedProductPrice\", requestBody.price);\r",
									"pm.environment.set(\"updatedProductSku\", requestBody.sku);\r",
									"pm.environment.set(\"updatedProductDescription\", requestBody.description);\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(requestBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{productId}},\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Pagination returns correct number of products\", function () {\r",
									"    const jsonData = pm.response.json();  \r",
									"   pm.expect(jsonData.length).to.eql(2); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product with non-exsiting ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response body is an empty JSON object\", function () {\r",
									"        const responseJson = pm.response.json();     \r",
									"        pm.expect(responseJson).to.deep.equal({});\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"99999"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const urlArray = pm.request.url.path;\r",
							"pm.collectionVariables.set(\"category\", urlArray[urlArray.length - 2]);\r",
							"pm.collectionVariables.set(\"productId\", urlArray[urlArray.length - 1]);\r",
							"\r",
							"\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							" const responseJson = pm.response.json();\r",
							"\r",
							"pm.variables.set(\"productId\", responseJson.id);\r",
							"pm.variables.set(\"productName\", responseJson.name);\r",
							"\r",
							"\r",
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  order with empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains title 'Error'\", function () {\r",
									" \r",
									"    pm.expect(pm.response.text()).to.include(\"Error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/99999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"99999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All orders have id, name, and sku\", function () {\r",
									"    const data = pm.response.json();\r",
									"    let invalidObjects = [];\r",
									"\r",
									"    data.forEach(order => {\r",
									"        if (!order.id || !order.name || !order.sku) {\r",
									"            invalidObjects.push(order);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(invalidObjects.length, `Objects missing required fields: ${JSON.stringify(invalidObjects)}`).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "By sorting DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Orders are sorted by id DESC\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const ids = jsonData.map(order => order.id);\r",
									"    const sortedDesc = [...ids].sort((a, b) => b - a);\r",
									"    pm.expect(ids).to.eql(sortedDesc);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?sortKey=id&sortOrder=DESC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortKey",
									"value": "id"
								},
								{
									"key": "sortOrder",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID (valid name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"ID matches name pattern (valid name)\", function () {  \r",
									"    const expectedName = \"order\" + responseJson.id;\r",
									"    pm.expect(responseJson.name).to.eql(expectedName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID (invalid name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"ID matches name pattern (invalid name)\", function () {  \r",
									"    const expectedName = \"order\" + responseJson.id;\r",
									"    console.warn(\"BUG DETECTED: invalid name.\");\r",
									"    pm.expect(responseJson.name).to.eql(expectedName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updating non-existing order returns 404\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Server incorrectly accepts invalid dateOfBirth (BUG found!)\", function () {\r",
									"    if (pm.response.code === 201) {\r",
									"        console.warn(\"BUG DETECTED: Server returned 201 Created for a user with invalid dateOfBirth.\");\r",
									"        console.warn(\"User data received:\", pm.response.json());\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should find users with status 'active' and 'emailVerified: false' (BUG)\", function () {\r",
									"    const responseJson = pm.response.json(); // Отримуємо всі дані про користувачів\r",
									"\r",
									"    const usersWithBug = responseJson.filter(user =>\r",
									"        user.status === \"active\" && user.emailVerified === false\r",
									"    );\r",
									"  \r",
									"    if (usersWithBug.length > 0) {\r",
									"        console.warn(\"BUG DETECTED: Found users who are 'active' but 'emailVerified' is 'false':\");\r",
									"        usersWithBug.forEach(user => {\r",
									"            console.warn(`- User ID: ${user.id}, Email: ${user.email}, Status: ${user.status}, Email Verified: ${user.emailVerified}`);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(usersWithBug.length).to.eql(0, `Expected 0 active users with unverified emails, but found ${usersWithBug.length}. This is a critical bug!`);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 Updated\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Server incorrectly accepts invalid dateOfBirth (BUG found!)\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.warn(\"BUG DETECTED: Server returned 200 Updated for a user with invalid dateOfBirth.\");\r",
									"        console.warn(\"User data received:\", pm.response.json());\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users #9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Total number of users is 9\", function () {\r",
									"    const responseJson = pm.response.json();   \r",
									"    pm.expect(responseJson.length).to.eql(9);   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users sorted by emailVerified: false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortKey=emailVerified&sortOrder=ASC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortKey",
									"value": "emailVerified"
								},
								{
									"key": "sortOrder",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "category",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "productSchema",
			"value": ""
		},
		{
			"key": "productName",
			"value": ""
		}
	]
}